import numpy as np

def join_feedback_with_payments_optimized(df1, df2):
    # Pre-sort both DataFrames
    df1 = df1.sort_values(by=['SSN_N', 'Payment Date']).reset_index(drop=True)
    df2 = df2.sort_values(by=['SSN_N', 'FDBCK_SENT_D']).reset_index(drop=True)
    
    # Add a 28-day cutoff to df1
    df1['Cutoff Date'] = df1['Payment Date'] - pd.Timedelta(days=28)
    
    # Create NumPy arrays for faster filtering and selection
    ssn_df1 = df1['SSN_N'].values
    payment_date = df1['Payment Date'].values
    cutoff_date = df1['Cutoff Date'].values

    ssn_df2 = df2['SSN_N'].values
    fdbck_sent_d = df2['FDBCK_SENT_D'].values
    amt_val_q = df2['AMT_VAL_Q'].values
    
    # Create output arrays
    result_amt_val_q = np.full(len(df1), None, dtype=object)
    result_fdbck_sent_d = np.full(len(df1), None, dtype=object)
    
    # Iterate through df1 and find the best match in df2
    j = 0  # Pointer for df2
    for i in range(len(df1)):
        while j < len(df2) and (ssn_df2[j] < ssn_df1[i] or (ssn_df2[j] == ssn_df1[i] and fdbck_sent_d[j] >= cutoff_date[i])):
            j += 1
        
        if j > 0 and ssn_df2[j - 1] == ssn_df1[i] and fdbck_sent_d[j - 1] < cutoff_date[i]:
            result_amt_val_q[i] = amt_val_q[j - 1]
            result_fdbck_sent_d[i] = fdbck_sent_d[j - 1]
    
    # Assign results back to the DataFrame
    df1['AMT_VAL_Q'] = result_amt_val_q
    df1['FDBCK_SENT_D'] = result_fdbck_sent_d
    df1.drop(columns=['Cutoff Date'], inplace=True)
    
    return df1

# Execute the optimized function
result_df_optimized = join_feedback_with_payments_optimized(df1_test, df2_test)

# Display the result
import ace_tools as tools; tools.display_dataframe_to_user(name="Highly Optimized Test Results", dataframe=result_df_optimized)
